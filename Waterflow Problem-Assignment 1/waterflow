import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.io.File;
import java.util.Comparator;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Set;
import java.util.Stack;

public class waterFlow {
	public static void main(String args[]) throws IOException {
	
		File inFile = null;
		if (0 < args.length) {
		   inFile = new File(args[1]);
		}
BufferedReader br = new BufferedReader(new FileReader(inFile));

		BufferedWriter bw = new BufferedWriter(new FileWriter("output.txt"));
		String fline = (br.readLine().trim());
		int testcount = Integer.parseInt(fline);
		
		while (testcount-- > 0) {
			if (fline.trim().length() == 0) {
				continue;
			}

			String optype = br.readLine().trim();
			Graphs<String> objGraph = new Graphs<String>();

			String sourceVertex = br.readLine().trim();
			objGraph.addVertex(sourceVertex);

			String[] destination = br.readLine().split(" ");

			for (int j = 0; j < destination.length; j++) {

				objGraph.addVertex(destination[j]);
			}
			String midVertex = br.readLine();
			if(!(midVertex.trim()).equals("")){
			String[] middileVertex =midVertex.split(" ");
			
			for (int i = 0; i < middileVertex.length; i++) {

				objGraph.addVertex(middileVertex[i]);
			}
			}
			else {
				
			}
			int pipes = Integer.parseInt(br.readLine().trim());
			if( pipes != 0){
			List<List<String>> edgeArray = new ArrayList<List<String>>(pipes);
			for (int i = 0; i < pipes; i++) {
				List<String> sublist = new ArrayList<String>();
				String[] edgeInput = br.readLine().split(" ");
				String downtime[] = null;
				ArrayList<Integer> downtime1 = new ArrayList<Integer>();
				Set<Integer> hs = new HashSet<>();

				if (Integer.parseInt(edgeInput[3]) != 0) {
					for (int k = 4; k < edgeInput.length; k++) {
						String[] temp = edgeInput[k].split("-");
						for (int i1 = Integer.parseInt(temp[0]); i1 <= Integer.parseInt(temp[1]); i1++) {
							downtime1.add(i1);
						}

					}

					hs.addAll(downtime1);
					downtime1.clear();
					downtime1.addAll(hs);
				}
				objGraph.addEdge(edgeInput[0], edgeInput[1], Integer.parseInt(edgeInput[2]), downtime1);
				for (int j = 0; j < edgeInput.length; j++) {
					sublist.add(edgeInput[j]);

				}
				edgeArray.add(sublist);
			}
			}
			else{
				
			}
			int iFlow = Integer.parseInt(br.readLine().trim());
			// objGraph.graphPrint();
			br.readLine();
			if (optype.equalsIgnoreCase("BFS")) {

				String output = objGraph.BFStraversal(objGraph, objGraph.getVertex(sourceVertex), destination, iFlow);
				// System.out.println(output);
				//System.out.println(output);
				bw.write(output);		
				bw.newLine();

			} else if (optype.equals("DFS")) {
				bw.write(objGraph.DFSTraversal(objGraph, objGraph.getVertex(sourceVertex), destination, iFlow));
				bw.newLine();
			} else if (optype.equals("UCS")) {

				String output = objGraph.UCSTraversal(objGraph, objGraph.getVertex(sourceVertex), destination, iFlow);
				bw.write(output);
				bw.newLine();
			}
			
		}
		
		br.close();
		bw.close();
	
	}
	
}

 class Vertex<Item> {

	private Item vertexName;
	private boolean visited;
	private ArrayList<Edge<Item>> adjList;

	private Vertex<Item> previousVertex;
	private int edgeCost;
	private Vertex<Item> nextVertex;
	private int pathCost;
	private ArrayList<Integer> downtime;

	public Vertex(Item vertexName) {
		this.vertexName = vertexName;
		this.adjList = new ArrayList<Edge<Item>>();

		this.visited = false;
		this.previousVertex = null;
		this.edgeCost = 0;
		this.pathCost = 0;
		this.downtime = null;
	}

	public ArrayList<Integer> getDowntime() {
		return downtime;
	}

	public void setDowntime(ArrayList<Integer> downtime) {
		this.downtime = downtime;
	}

	public int getPathCost() {
		return pathCost;
	}

	public void setPathCost(int totalcost) {
		pathCost = totalcost;
	}

	public void setEdgeCost(int cost) {
		this.edgeCost = cost;
	}

	public int getEdgeCost() {
		return this.edgeCost;
	}

	public void setVisited(Boolean isVisited) {
		this.visited = isVisited;
	}

	public boolean isVisited() {
		return this.visited;
	}

	public void setPrevious(Vertex<Item> previous) {
		this.previousVertex = previous;
	}

	public void setNext(Vertex<Item> next) {
		this.nextVertex = next;
	}

	public Vertex<Item> getNext() {
		return this.nextVertex;
	}

	public Vertex<Item> getPrevious() {
		return previousVertex;

	}

	public void setCost(Edge<Item> e) {
		edgeCost = edgeCost + e.getCost();
	}

	public int getCost() {
		return edgeCost;
	}

	public boolean isEdge(Vertex<Item> v1, Vertex<Item> v2) {
		Item[] array = v1.adjSortedList();
		for (int i = 0; i < array.length; i++) {
			if (array[i].equals(v2))
				return true;
		}
		return false;

	}

	public void addNeighbour(Item vertexName) {
		// adjList.add(new Edge<Item>((Vertex<Item>)
		// vertexName),ArrayList<Integer> downtime);

	}

	public ArrayList<Edge<Item>> adjList() {

		return adjList;
	}

	public ArrayList<Edge<Item>> adjDFSlist() {
		
		Collections.sort(adjList, new CustomDFSComparator());
		return adjList;
	}

	public ArrayList<Edge<Item>> adjBFSlist() {

		Collections.sort(adjList, new CustomBFSComparator());
		return adjList;
	}

	public void addNeighbour(int cost, Vertex<Item> vertex, ArrayList<Integer> downtime) {
		adjList.add(new Edge<Item>(cost, (Vertex<Item>) vertex, downtime));

	}

	public Item[] adjSortedList() {
		@SuppressWarnings("unchecked")

		Item[] itemArray = (Item[]) new Object[adjList.size()];
		for (int i = 0; i < adjList.size(); i++) {
			itemArray[i] = adjList.get(i).getEdgeItemName();
		}
		Arrays.sort(itemArray, Collections.reverseOrder());
		
		return itemArray;

	}

	public Item getVertexName() {
		return this.vertexName;
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append(vertexName + ":");
		for (Item w : adjSortedList()) {
			sb.append("->" + w);

		}
		return sb.toString();
	}

	
	}



class Edge<Item> {

	private int cost;
	private Vertex<Item> nextVertex;
	private ArrayList<Integer> downtime;
	private Object currentVertex;

	public Edge(int cost, Vertex<Item> v, ArrayList<Integer> downtime) {
		this.cost = cost;
		nextVertex = v;
		this.downtime = downtime;

	}

	public void setDowntime(ArrayList<Integer> downtime) {
		this.downtime = downtime;
	}

	public ArrayList<Integer> getDowntime() {
		return downtime;
	}

	public Edge() {

	}

	public int getCost() {
		return cost;
	}

	public void setCost(int cost) {
		this.cost = cost;
	}

	public Vertex<Item> getNextVertex() {
		return nextVertex;
	}

	public void setNextVertex(Vertex<Item> nextVertex) {
		this.nextVertex = nextVertex;
	}

	public Item getEdgeItemName() {
		return nextVertex.getVertexName();
	}

	public Edge(Vertex<Item> nextVertex) {
		this.nextVertex = nextVertex;
		this.cost = 1;
	}

	

}



 class CustomDFSComparator implements Comparator<Edge> {
	@Override
	public int compare(Edge o1, Edge o2) {
			
		

String a = (o1.getNextVertex().getVertexName().toString());
String b = (o2.getNextVertex().getVertexName().toString());
return(b.compareToIgnoreCase(a));
}
}


 class CustomBFSComparator implements Comparator<Edge> {
 	@Override
 	public int compare(Edge o1, Edge o2) {
 		String a = (o1.getNextVertex().getVertexName().toString());
 		String b = (o2.getNextVertex().getVertexName().toString());
 		return(a.compareToIgnoreCase(b));

 	}
 }
 class Graphs<Item> {
		private int vertexCount = 0;
		private ArrayList<Vertex<Item>> traceArray;
		private HashMap<Item, Vertex<Item>> vertexArray;

		public Graphs() {
			vertexArray = new HashMap<Item, Vertex<Item>>();
			traceArray = new ArrayList<Vertex<Item>>();

		}

		public void addVertex(Item vertexName) {
			Vertex<Item> vertex = new Vertex<Item>(vertexName);
			this.vertexCount += 1;
			vertexArray.put(vertexName, vertex);

		}

		public int graphLength() {
			return vertexArray.size();
		}

		public HashMap<Item, Vertex<Item>> vertexArray() {
			return vertexArray;
		}

		public Vertex<Item> getVertex(Item vname) {
			return vertexArray.get(vname);
		}

		public void addEdge(Item vertex_1, Item vertex_2, int cost, ArrayList<Integer> downtime) {
			if (!vertexArray.containsKey(vertex_1))
				addVertex(vertex_1);
			if (!vertexArray.containsKey(vertex_2))
				addVertex(vertex_2);
			Vertex<Item> vertex1 = vertexArray.get(vertex_1);
			Vertex<Item> vertex2 = vertexArray.get(vertex_2);

			// vertex1.addNeighbour(vertex_2); // for BFS and DFS
			vertex1.setDowntime(downtime);
			vertex2.setPrevious(vertex1);
			vertex1.addNeighbour(cost, vertex2, downtime);
		}

		public void graphPrint() {
			for (Item w : vertexArray.keySet()) {
				System.out.println(vertexArray.get(w).toString());

			}

		}

		public void unmarkVertices() {
			for (Item w : vertexArray.keySet()) {
				if (vertexArray.get(w).isVisited() == true) {
					vertexArray.get(w).setVisited(false);
				}
			}
		}

		public String BFStraversal(Graphs<Item> graph, Vertex<Item> sourceVertex, String[] goalVertices, int iFlow) {
			int counter = 0;
			Map<Item, Vertex<Item>> map = graph.vertexArray();

			if (!sourceVertex.isVisited()) {

				Queue<Vertex<Item>> queue = new LinkedList<Vertex<Item>>();

				queue.add(sourceVertex);
				while (queue.size() > 0) {
					Vertex<Item> currentVertex = queue.remove();

					traceArray.add(currentVertex);

					for (int i = 0; i < goalVertices.length; i++) {
						if (currentVertex.getVertexName().equals(goalVertices[i])) {
							Vertex<Item> vtemp = currentVertex;
							while (vtemp.getVertexName() != sourceVertex.getVertexName()) {
								vtemp = vtemp.getPrevious();

								counter++;

							}
							return ((String) currentVertex.getVertexName() + " " + ((counter + iFlow) % 24));

						}

					}

					for (Edge<Item> e : currentVertex.adjBFSlist()) {
						Vertex<Item> objVertex = e.getNextVertex();
						if (!objVertex.isVisited() && !traceArray.contains(objVertex)) {
							objVertex.setVisited(true);
							objVertex.setPrevious(currentVertex);

							queue.add(objVertex);

						}
					}
				}
			}
			return "None";

		}

		public String DFSTraversal(Graphs<Item> graph, Vertex<Item> sourceVertex, String[] goalVertices, int iFlow) {
			int counter = 0;
			Map<Item, Vertex<Item>> map = graph.vertexArray();

			if (!sourceVertex.isVisited()) {
				Stack<Vertex<Item>> stack = new Stack<Vertex<Item>>();
				stack.push(sourceVertex);
				while (stack.size() > 0) {
					Vertex<Item> vertex = stack.pop();

					traceArray.add(vertex);

					for (int i = 0; i < goalVertices.length; i++) {
						if (vertex.getVertexName().equals(goalVertices[i])) {
							Vertex<Item> vtemp = vertex;
							while (vtemp.getVertexName() != sourceVertex.getVertexName()) {
								vtemp = vtemp.getPrevious();

								counter++;

							}
							return ((String) vertex.getVertexName() + " " + ((counter + iFlow) % 24));

						}

					}

					
					
					for (Edge<Item> e : vertex.adjDFSlist()) {
						
					Vertex<Item> objVertex = e.getNextVertex();
					if (!objVertex.isVisited() && !traceArray.contains(objVertex)) {
						
						objVertex.setPrevious(vertex);
						stack.push(objVertex);

					}
				}
				}
			}
			return "None";

		}

		public String UCSTraversal(Graphs<Item> graph, Vertex<Item> sourceVertex, String[] goalVertices, int iFlow) {
			int counter = 0;

			sourceVertex.setPathCost(iFlow);
			PriorityQueue<Vertex<Item>> objPrQueue = new PriorityQueue<Vertex<Item>>(20, new Comparator<Vertex<Item>>() {

				public int compare(Vertex<Item> v1, Vertex<Item> v2) {
					if (v1.getPathCost() > v2.getPathCost()) {
						return 1;
					}

					else if (v1.getPathCost() < v2.getPathCost()) {
						return -1;
					}

					else {
						String vName = (String) v1.getVertexName();
						String vName1 = (String) v2.getVertexName();

						if (vName.charAt(0) > vName.charAt(0)) {
							return -1;
						} else
							return 1;
					}

				}
			});

			objPrQueue.add(sourceVertex);
			while (objPrQueue.size() > 0) {

				Vertex<Item> currentVertex = objPrQueue.poll();

				traceArray.add(currentVertex);
				for (int i = 0; i < goalVertices.length; i++) {
					if (currentVertex.getVertexName().equals(goalVertices[i])) {

						return ((String) currentVertex.getVertexName() + " " + currentVertex.getPathCost() % 24);

					}

				}
				for (Edge<Item> e : currentVertex.adjList()) {

					if (e.getDowntime().contains(currentVertex.getPathCost() % 24)) {
						continue;
					}
					Vertex<Item> nextVertex = e.getNextVertex();
					int individualCost = e.getCost();
					int pathCost = currentVertex.getPathCost() + individualCost;
					int pathCostNextVertex = nextVertex.getPathCost();

					if (!traceArray.contains(nextVertex) && !objPrQueue.contains(nextVertex)) {
						nextVertex.setPathCost(pathCost);
						objPrQueue.add(nextVertex);
						nextVertex.setPrevious(currentVertex);

					} else if (objPrQueue.contains(nextVertex)) {

						if (pathCost < pathCostNextVertex) {
							objPrQueue.remove(nextVertex);

							objPrQueue.add(nextVertex);
							nextVertex.setPathCost(pathCost);
							nextVertex.setPrevious(currentVertex);
						}
					}

				}

			}

			return "None";
		}
	}

